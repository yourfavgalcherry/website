import { Block, BlockRenderer, ExtensionFunc } from './types';
import { Client } from '@notionhq/client';
import { Plugin } from './plugin';
export type NotionRendererArgs = {
    /**
     * List of custom renderers.
     */
    renderers?: BlockRenderer<any>[];
    /**
     * List of extensions to improve existing blocks.
     */
    extensions?: ExtensionFunc[];
    /**
     * NotionClient used to query block children.
     * If not defined, blocks with children will not be fully supported.
     */
    client?: Client;
};
export declare class NotionRenderer {
    private renderers;
    private extensions;
    readonly client?: Client;
    constructor(args?: NotionRendererArgs);
    addBlockRenderer<T extends Block>(renderer: BlockRenderer<T>): void;
    addExtension(extension: ExtensionFunc): void;
    render(...blocks: Block[]): Promise<string>;
    renderBlock(blockId: string): Promise<string>;
    use(...plugins: ReturnType<Plugin>[]): Promise<void>;
}
