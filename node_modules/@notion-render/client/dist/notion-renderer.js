"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotionRenderer = void 0;
const globals_1 = require("./globals");
class NotionRenderer {
    constructor(args = {}) {
        this.renderers = {};
        this.extensions = [];
        [...globals_1.BLOCK_RENDERERS, ...(args.renderers ?? [])].forEach((Block) => this.addBlockRenderer(Block));
        [...globals_1.EXTENSIONS, ...(args.extensions ?? [])].forEach((extension) => this.addExtension(extension));
        this.client = args.client;
    }
    addBlockRenderer(renderer) {
        this.renderers[renderer.type] = renderer;
    }
    addExtension(extension) {
        this.extensions.push(extension);
    }
    async render(...blocks) {
        for (const extension of this.extensions) {
            blocks = await extension(blocks);
        }
        const promises = blocks
            .map((block) => {
            const renderer = this.renderers[block.type];
            if (!renderer)
                console.warn(`There is no renderer for block ${block.type}`);
            return { block, renderer };
        })
            .filter(({ renderer }) => Boolean(renderer))
            .map(({ block, renderer }) => renderer(block, this));
        return Promise.all(promises).then((result) => result.join(''));
    }
    async renderBlock(blockId) {
        if (!this.client)
            throw new Error('You must define a Notion Client if you want to use this feature.');
        const { results } = await this.client.blocks.children.list({
            block_id: blockId,
        });
        return this.render(...results);
    }
    async use(...plugins) {
        plugins.forEach((plugin) => {
            plugin.renderers.forEach((renderer) => this.addBlockRenderer(renderer));
            plugin.extensions.forEach((extension) => this.addExtension(extension));
        });
    }
}
exports.NotionRenderer = NotionRenderer;
//# sourceMappingURL=notion-renderer.js.map